/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dkeep.guI;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.text.NumberFormat;

import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.text.NumberFormatter;

import dkeep.logic.Game;
import dkeep.logic.LevelLogic;
import dkeep.logic.Map;

import javax.swing.JButton;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import java.awt.event.ActionListener;

/**
 *
 * @author luis
 */
public class KeepMainFrame extends javax.swing.JFrame {

	// by default ..

	private int numberOfOgres = 1;

	private String guardPersonality = "Rookie";

	private Game game;

	private boolean newgamestarted = false;
	
	private boolean customMapMade = false;

	/**
	 * Creates new form KeepMainFrame
	 */
	public KeepMainFrame() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		// formating the textfield for integer number of ogres
		NumberFormat format = NumberFormat.getInstance();
		NumberFormatter formatter = new NumberFormatter(format);
		formatter.setValueClass(Integer.class);
		formatter.setMinimum(1);
		formatter.setMaximum(5);
		formatter.setAllowsInvalid(false);
		
		//the editor will only be properly initialized once the create new map button is pressed
		editor = null;
		
		label1 = new java.awt.Label();
		nOgresBox = new JFormattedTextField(formatter);
		label2 = new java.awt.Label();
		jComboBox1 = new javax.swing.JComboBox<>();
		newGame = new javax.swing.JButton();
		moveLeft = new javax.swing.JButton();
		moveUp = new javax.swing.JButton();
		moveRight = new javax.swing.JButton();
		moveDown = new javax.swing.JButton();
		exitGame = new javax.swing.JButton();
		jLabel1 = new javax.swing.JLabel();
		gameScreen = new SimpleGraphicsPanel();
		saveGame = new javax.swing.JButton();
		loadGame = new javax.swing.JButton();

		gameScreen.setFocusable(true);

		// (The key listener won't activate if the element isn't focused ..)

		// MOUSE LISTENER FOR FOCUS
		addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				gameScreen.requestFocusInWindow();
			}
		});

		// KEY LISTENER
		gameScreen.addKeyListener(new KeyListener() {

			@Override
			public void keyTyped(KeyEvent e) {
			}

			@Override
			public void keyReleased(KeyEvent e) {
			}

			@Override
			public void keyPressed(KeyEvent e) {
				switch (e.getKeyCode()) {

				case KeyEvent.VK_LEFT:
					moveLeft.doClick();
					break;

				case KeyEvent.VK_RIGHT:
					moveRight.doClick();
					break;

				case KeyEvent.VK_UP:
					moveUp.doClick();
					break;

				case KeyEvent.VK_DOWN:
					moveDown.doClick();
					break;
				}
			}
		});

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setPreferredSize(new java.awt.Dimension(600, 550));

		label1.setText("Number of ogres:");

		nOgresBox.setName(""); 
		nOgresBox.setSelectionEnd(-1);

		label2.setText("Guard personality");

		jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Rookie", "Drunken", "Suspicious" }));
		jComboBox1.setToolTipText("");
		jComboBox1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jComboBox1ActionPerformed(evt);
			}
		});

		newGame.setText("New Game");
		newGame.setToolTipText("");
		newGame.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		moveLeft.setText("Left");
		moveLeft.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton2ActionPerformed(evt);
			}
		});

		moveUp.setText("Up");
		moveUp.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton3ActionPerformed(evt);
			}
		});

		moveRight.setText("Right");
		moveRight.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton4ActionPerformed(evt);
			}
		});

		moveDown.setText("Down");
		moveDown.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton5ActionPerformed(evt);
			}
		});

		exitGame.setText("Exit Game");
		exitGame.setToolTipText("");
		exitGame.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton6ActionPerformed(evt);
			}
		});
		
		saveGame.setText("Save Game");
		saveGame.setToolTipText("");
		saveGame.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveGameActionPerformed(evt);
			}
		});
		
		loadGame.setText("Load Game");
		loadGame.setToolTipText("");
		loadGame.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				loadGameActionPerformed(evt);
			}
		});

		jLabel1.setText("<Game status goes here>");
		jLabel1.setToolTipText("");

		createNewMap = new JButton();
		createNewMap.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				CreateNewMapActionPerformed(evt);
			}
		});
		createNewMap.setToolTipText("");
		createNewMap.setText("Create New Map");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		layout.setHorizontalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addGap(1)
					.addComponent(label1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(nOgresBox, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(357, Short.MAX_VALUE))
				.addGroup(layout.createSequentialGroup()
					.addGroup(layout.createParallelGroup(Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
							.addContainerGap()
							.addComponent(gameScreen, GroupLayout.PREFERRED_SIZE, 340, GroupLayout.PREFERRED_SIZE))
						.addGroup(layout.createSequentialGroup()
							.addGap(34)
							.addComponent(label2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
						.addGroup(layout.createSequentialGroup()
							.addContainerGap()
							.addComponent(jLabel1)))
					.addGroup(layout.createParallelGroup(Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
							.addGap(24)
							.addGroup(layout.createParallelGroup(Alignment.LEADING)
								.addGroup(layout.createSequentialGroup()
									.addGroup(layout.createParallelGroup(Alignment.LEADING)
										.addGroup(layout.createSequentialGroup()
											.addGap(24)
											.addComponent(moveDown))
										.addGroup(layout.createSequentialGroup()
											.addComponent(moveLeft)
											.addGap(18)
											.addComponent(moveRight)))
									.addContainerGap(23, Short.MAX_VALUE))
								.addGroup(layout.createSequentialGroup()
									.addGap(30)
									.addComponent(moveUp)
									.addContainerGap(100, Short.MAX_VALUE))
								.addGroup(layout.createSequentialGroup()
									.addGap(8)
									.addComponent(newGame, GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
									.addGap(27))))
						.addGroup(layout.createSequentialGroup()
							.addPreferredGap(ComponentPlacement.RELATED)
							.addGroup(layout.createParallelGroup(Alignment.LEADING)
								.addComponent(createNewMap, GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
								.addComponent(exitGame, GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE))
							.addContainerGap())))
		);
		layout.setVerticalGroup(
			layout.createParallelGroup(Alignment.TRAILING)
				.addGroup(layout.createSequentialGroup()
					.addGap(22)
					.addGroup(layout.createParallelGroup(Alignment.TRAILING)
						.addComponent(nOgresBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(label1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(16)
					.addGroup(layout.createParallelGroup(Alignment.LEADING)
						.addComponent(label2, GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
						.addGroup(layout.createParallelGroup(Alignment.BASELINE)
							.addComponent(newGame)
							.addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(layout.createParallelGroup(Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
							.addComponent(createNewMap)
							.addGap(54)
							.addComponent(moveUp)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addGroup(layout.createParallelGroup(Alignment.BASELINE)
								.addComponent(moveLeft)
								.addComponent(moveRight))
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(moveDown))
						.addComponent(gameScreen, GroupLayout.PREFERRED_SIZE, 320, GroupLayout.PREFERRED_SIZE))
					.addGap(56))
				.addGroup(layout.createSequentialGroup()
					.addContainerGap(438, Short.MAX_VALUE)
					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(exitGame)
						.addComponent(jLabel1))
					.addContainerGap())
		);
		
		
		saveGame.setFont(new Font("Tahoma", Font.PLAIN, 14));
		saveGame.setBounds(400, 350, 166, 56);
		saveGame.setEnabled(false);
		this.add(saveGame);
		
		loadGame.setFont(new Font("Tahoma", Font.PLAIN, 14));
		loadGame.setBounds(400, 420, 166, 46);
		this.add(loadGame);
		
		getContentPane().setLayout(layout);

		pack();
	}// </editor-fold>

	/*
	 * CONVERT MAP TO STRING
	 */
	private String convertmaptoString(char[][] mapprint) {

		String s = "";

		for (int i = 0; i < mapprint.length; i++) {
			for (int j = 0; j < mapprint[i].length; j++) {
				s += mapprint[i][j];

				if (j == mapprint[i].length - 1) {
					s += "\n";
				}
			}
		}

		return s;
	}

	/*
	 * GUARD PERSONALITY
	 */
	private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:

		Object selected = jComboBox1.getSelectedItem();

		if (selected.toString().equals("Rookie")) {
			guardPersonality = "Rookie";
		}

		else if (selected.toString().equals("Drunken")) {
			guardPersonality = "Drunken";
		}

		else if (selected.toString().equals("Suspicious")) {
			guardPersonality = "Suspicious";
		}
	}

	/*
	 * NEW GAME BUTTON
	 */
	private void jButton1ActionPerformed(ActionEvent evt) {
		
		JOptionPane popup = new JOptionPane();
		
		String answer = JOptionPane.showInputDialog("Default map or custom map? (type custom or default)");
		
		if(answer == null) {
			return;
		}
		
		boolean normalmap = true;
		
		if(answer.equals("custom")) {
			normalmap = false;
		} 
		
		else if(answer.equals("default")) {
			normalmap = true;
		}
		
		else {
			popup.showMessageDialog(this, "Invalid, please type custom or default.");
			return;
		}
		
	if(editor != null && editor.getValidMap() && normalmap == false) {
		//in this case it will run the custom map !IF IT IS VALID!
			
		game = new Game(editor.getCustomMap().getMatrix());
				
		gameScreen.setMap(editor.getCustomMap());
		gameScreen.paint(gameScreen.getGraphics());
		
		gameScreen.requestFocusInWindow();
				
		customMapMade = false;
	} 

	else {
		
		if(normalmap == false) {
			popup.showMessageDialog(this, "The editor had no valid custom map made, so we're running default.");
		}
		
		if (nOgresBox.getValue() != null) {
			// if the text field is empty, it will by omission be 1 ogre

			// otherwise ..
			String s = nOgresBox.getText();

			numberOfOgres = Integer.parseInt(s);
		}
		
		game = new Game(numberOfOgres, guardPersonality);
		// game.getGuard().setMovementBlocker(true);
		nOgresBox.setValue(null);

		// printing out the current map using a custom function that converts it
		// to string first

		gameScreen.setMap(game.getMap());
		gameScreen.paint(gameScreen.getGraphics());
		gameScreen.requestFocusInWindow();
	}
		
		newgamestarted = true;

		// reactivate the buttons just in case they were shutdown previously
		moveLeft.setEnabled(true);
		moveRight.setEnabled(true);
		moveUp.setEnabled(true);
		moveDown.setEnabled(true);
		saveGame.setEnabled(true);

		jLabel1.setText("The game is running.");
	}

	/*
	 * HERO MOVE LEFT
	 */
	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {

		if (newgamestarted && game.getLevelLogic().getLevelState().equals("Running")) {
			game.updateGame('a');

			gameScreen.setMap(game.getMap());
			 
			gameScreen.paint(gameScreen.getGraphics());
		}

		if (game.getLevelLogic().getLevelState().equals("Over")) {
			jLabel1.setText("The game is over.");
			moveLeft.setEnabled(false);
			moveRight.setEnabled(false);
			moveUp.setEnabled(false);
			moveDown.setEnabled(false);
		}
		
		if (game.getLevelLogic().getLevelState().equals("Victory")) {
			jLabel1.setText("You win!");
			moveLeft.setEnabled(false);
			moveRight.setEnabled(false);
			moveUp.setEnabled(false);
			moveDown.setEnabled(false);
		}
	}

	/*
	 * HERO MOVE UP
	 */
	private void jButton3ActionPerformed(ActionEvent evt) {

		if (newgamestarted && game.getLevelLogic().getLevelState().equals("Running")) {
			game.updateGame('w');

			gameScreen.setMap(game.getMap());
			gameScreen.paint(gameScreen.getGraphics());
		}

		if (game.getLevelLogic().getLevelState().equals("Over")) {
			jLabel1.setText("The game is over.");
			moveLeft.setEnabled(false);
			moveRight.setEnabled(false);
			moveUp.setEnabled(false);
			moveDown.setEnabled(false);
		}
		
		if (game.getLevelLogic().getLevelState().equals("Victory")) {
			jLabel1.setText("You win!");
			moveLeft.setEnabled(false);
			moveRight.setEnabled(false);
			moveUp.setEnabled(false);
			moveDown.setEnabled(false);
		}
	}

	/*
	 * HERO MOVE RIGHT
	 **/
	private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {
		if (newgamestarted && game.getLevelLogic().getLevelState().equals("Running")) {
			game.updateGame('d');
			
			gameScreen.setMap(game.getMap());
			gameScreen.paint(gameScreen.getGraphics());

		}

		if (game.getLevelLogic().getLevelState().equals("Over")) {
			jLabel1.setText("The game is over.");
			moveLeft.setEnabled(false);
			moveRight.setEnabled(false);
			moveUp.setEnabled(false);
			moveDown.setEnabled(false);
		}
		
		if (game.getLevelLogic().getLevelState().equals("Victory")) {
			jLabel1.setText("You win!");
			moveLeft.setEnabled(false);
			moveRight.setEnabled(false);
			moveUp.setEnabled(false);
			moveDown.setEnabled(false);
		}
	}

	/*
	 * HERO MOVE DOWN
	 */
	private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {
		if (newgamestarted && game.getLevelLogic().getLevelState().equals("Running")) {
			game.updateGame('s');
			
			gameScreen.setMap(game.getMap());
			gameScreen.paint(gameScreen.getGraphics());

		}

		if (game.getLevelLogic().getLevelState().equals("Over")) {
			jLabel1.setText("The game is over.");
			moveLeft.setEnabled(false);
			moveRight.setEnabled(false);
			moveUp.setEnabled(false);
			moveDown.setEnabled(false);
		}
		
		if (game.getLevelLogic().getLevelState().equals("Victory")) {
			jLabel1.setText("You win!");
			moveLeft.setEnabled(false);
			moveRight.setEnabled(false);
			moveUp.setEnabled(false);
			moveDown.setEnabled(false);
		}
	}

	//EXIT GAME
	private void jButton6ActionPerformed(ActionEvent evt) {
		// exit game button
		System.exit(0);
	}
	
	
	//SAVE GAME
	private void saveGameActionPerformed(ActionEvent evt) {
		JOptionPane popup = new JOptionPane();
		
		String path = JOptionPane.showInputDialog("Enter a file");
		
		if(path == null) {
			return;
		}
		
		File savefile = new File(path);
		
		if(!savefile.exists()) {
			try {
				savefile.createNewFile();
			} catch (IOException e) {
				System.out.println("There was a problem creating the file.");
				e.printStackTrace();
			}
		}
		
		FileOutputStream file = null;
	    ObjectOutputStream out = null;
	    
	    try {
	    	file = new FileOutputStream(savefile,false);
	    	OutputStream buffer = new BufferedOutputStream(file);
	    	out = new ObjectOutputStream(file);
	    	out.writeObject(game);
	    	out.flush();
	    	out.close();
	    	System.out.println("Current game saved in: "+path);
	    	
	     } catch (FileNotFoundException e) {
	           popup.showMessageDialog(this, "The file you entered is invalid.");
	    	   e.printStackTrace();
	     } catch (IOException e) {
	           e.printStackTrace();
	     }
	    
	    gameScreen.requestFocusInWindow();
	}
	
	//LOAD GAME
	private void loadGameActionPerformed(ActionEvent evt) {
		JOptionPane popup = new JOptionPane();
		
		boolean success = true;
		
		String path = JOptionPane.showInputDialog("Enter a file");
		
		if(path == null) {
			return;
		}
		
		Game savedGame;
		Map savedMap = null;
		LevelLogic savedLogic = null;
		int numOgres = 0;
		String gamestate = "";

        FileInputStream file;
        
       try {
           file = new FileInputStream(path);
           InputStream buffer = new BufferedInputStream(file);
           ObjectInput input = new ObjectInputStream (buffer);
          
           savedGame = (Game)input.readObject();
           savedMap = savedGame.getMap();
           savedLogic = savedGame.getLevelLogic();
           numOgres = savedGame.getNumberOfOgres();
           gamestate = savedGame.getLevelLogic().getLevelState();
           
           input.close();
           
           System.out.println("Loaded game saved in: "+path);
       } catch (FileNotFoundException e) {
           popup.showMessageDialog(this, "The file you entered is invalid, select another one or cancel.");
           success = false;
    	   e.printStackTrace();
       } catch (IOException e) {
           e.printStackTrace();
       } catch (ClassNotFoundException e) {
           e.printStackTrace();
       }
       
       if(success == false) {
    	   return;
       }
       
       Game toRun = new Game(numOgres, gamestate, savedMap, savedLogic);
       
       game = toRun;
       
       gameScreen.setMap(game.getMap());
       gameScreen.paint(gameScreen.getGraphics());
       gameScreen.requestFocusInWindow();
       
       newgamestarted = true;
       
       moveLeft.setEnabled(true);
       moveRight.setEnabled(true);
       moveUp.setEnabled(true);
       moveDown.setEnabled(true);
       saveGame.setEnabled(true);
       
       jLabel1.setText("The game is running.");
	}

	//CREATE MAP
	private void CreateNewMapActionPerformed (ActionEvent evt)
	{
		editor = new OptionsFrame();
	}
	
	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting
		// code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.
		 * html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(KeepMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(KeepMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(KeepMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(KeepMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new KeepMainFrame().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify
	private javax.swing.JButton newGame;
	private OptionsFrame editor;
	private javax.swing.JButton moveLeft;
	private javax.swing.JButton moveUp;
	private javax.swing.JButton moveRight;
	private javax.swing.JButton moveDown;
	private javax.swing.JButton exitGame;
	private javax.swing.JComboBox<String> jComboBox1;
	private javax.swing.JLabel jLabel1;
	private SimpleGraphicsPanel gameScreen;
	private java.awt.Label label1;
	private java.awt.Label label2;
	private JFormattedTextField nOgresBox;
	private JButton createNewMap;
	private JButton saveGame;
	private JButton loadGame;
	// End of variables declaration
}
